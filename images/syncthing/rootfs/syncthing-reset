#!/bin/bash
#
# Initializes syncthing with configs appropriate for the target environment (a
# docker-compose setup on a server somewhere on the intertubes), and then starts
# it.
#
# Ideally the configs set here should not be changeable by users from the GUI,
# but syncthing doesn't allow to lock down most of them.
#
# So instead we just reset all the managed settings as if they were not part of
# syncthing's persisted state.
#

set -eo pipefail

# Using a different port during initialization ensures that the healthcheck
# doesn't give false positives.
STGUIADDRESS=127.0.0.1:8888
# Setting the gui-address via the environment variable or the CLI option
# requires to also set the gui-apikey option externally.
# Note that this enables an *extra* api key (i.e. in addition to the one in the
# configuration), unlike what the documentation suggests (by saying it
# "overrides" it).
STGUIAPIKEY="$(cat /proc/sys/kernel/random/uuid)"
export STGUIADDRESS STGUIAPIKEY

### environment ################################################################

# All managed environment variables should allow getting their value from files.
USER_VARS=(
    GLOBAL_ANNOUNCE_ENABLED
    GUI_ENABLED
    GUI_PASSWORD
    GUI_UNPROTECTED
    GUI_USER
    INSTANCE_NAME
    SYNC_PORT
)

# Spelled-out switches look nicer in the compose file, but it's easier to handle
# 0/empty and 1 in bash.
FLAG_VARS=(
    GLOBAL_ANNOUNCE_ENABLED
    GUI_ENABLED
    GUI_UNPROTECTED
)

for varname in "${USER_VARS[@]}"; do
    declare -n src="${varname}__FILE"
    declare -n tgt="$varname"
    export tgt

    if [ -z "${tgt+isset}" ] && [ -f "$src" ]; then
        tgt="$(cat "$src")"
    fi
done

for varname in "${FLAG_VARS[@]}"; do
    declare -n var="${varname}"

    case "$var" in
        true|yes) var=1 ;;
        false|no) var=0 ;;
    esac
done


### utility functions ##########################################################

# Retrying wrapper for 'syncthing cli'
stcli() {
    # GUI changes makes the server hang for a few milliseconds (up to 15-20
    # under load), so we allow a failure timeout to work around this.
    # https://github.com/syncthing/syncthing/issues/8255
    local timeout start now did_wait out
    timeout=30
    start="$(date +%s)"

    until out="$(syncthing cli "$@")"; do
        now="$(date +%s)"
        if (( start + timeout < now )); then
            >&2 echo "[  *  ] Syncthing server timeout, aborting init"
            exit 1
        fi

        if ! (( did_wait )); then
            did_wait=1
            >&2 echo "[  *  ] Syncthing server stuck, waiting a bit..."
        fi
        sleep 0.3
    done

    if (( did_wait )); then
        now="$(date +%s)"
        >&2 echo "[  *  ] ... unstuck after $(( now - start ))s"
    fi

    if [ -n "$out" ]; then
        # Syncthing can shut down in the middle of serving a request, so the
        # CLI's output must be buffered
        echo "$out"
    fi
}
export -f stcli # Needed for use in `xargs bash`

# Escapes (quotes) each argument, then outputs them separated by a space
q() {
    while (( $# )); do
        printf '%q' "$1"
        shift
        if (( $# )); then
            printf ' '
        fi
    done
}

# Applies syncthing configurations, parsing a mini configuration language
# shellcheck disable=SC2016
config() {
    sed -E 's/\s*#.*//' \
    | xargs -r -L1 -- bash -c '
        set -eo pipefail

        op="$1"; shift
        case "$op" in
        =)  # set value
            >&2 echo "[  *  ] configure: ${*:1:$#-1}"
            stcli config "${@:1:$#-1}" set "${@: -1}"
            ;;
        \+) # append value to list
            >&2 echo "[  *  ] configure: ${*:1:$#-1}"
            stcli config "${@:1:$#-1}" add "${@: -1}"
            ;;
        z)  # clear list
            >&2 echo "[  *  ] configure: $*"
            for i in $(
                stcli config "$@" list
            ); do
                stcli config "$@" 0 delete
            done
            ;;
        esac
    ' -
}


### (re-)initialization ########################################################

initargs=(
    --no-browser
    --no-restart                    # Managed by docker-compose
    --no-upgrade                    # Upgrade the docker image instead

    --skip-port-probing
    --no-default-folder
)

# Start an instance that will be used to modify its own configuration
syncthing serve "${initargs[@]}" &

# Allow some time for the server to be ready
stcli config version get >/dev/null 2>&1

config <<EOF
# Overwrites the default "default" value; we want "default" but with custom
# ports and without relays (by default peers connect with the domain name)
z options raw-listen-addresses
+ options raw-listen-addresses          tcp://:$(q "${SYNC_PORT:-22000}")
+ options raw-listen-addresses          quic://:$(q "${SYNC_PORT:-22000}")

= options local-ann-enabled             false           # Server setup, no local devices
= options global-ann-enabled            false           # Peers connect with the domain name
= options start-browser                 false
= options natenabled                    false           # Disables uPNP and NAT-PMP, the external IP is still correctly resolved
= options auto-upgrade-intervalh        0               # Docker setup, should upgrade the image instead (disabled in upstream's build anyway)

= defaults folder path                  /data
= defaults folder ignore-perms          true

= gui raw-address                       127.0.0.1:8384  # Unreachable from outside unless explicitly enabled
EOF

if (( GLOBAL_ANNOUNCE_ENABLED )); then
    config <<-EOF
    # Same as with the 'default' value (at the time this script was written).
    # Cannot be replaced with just 'default' as the port might be custom.
    + options raw-listen-addresses      dynamic+https://relays.syncthing.net/endpoint
    = options global-ann-enabled        true
	EOF
fi

if [ -n "$INSTANCE_NAME" ]; then
    instance_id="$(stcli show system | jq -r .myID)"
    config <<-EOF
    = devices $(q "$instance_id") name  $(q "$INSTANCE_NAME")
	EOF
fi

if (( GUI_ENABLED )); then
    # Leaving the GUI unprotected requires an affirmative step.
    # Note: Even when setting this option, an "Insecure admin access is enabled"
    # notification shows up after every restart. There is no way to disable
    # this, cf. https://forum.syncthing.net/t/insecure-admin-access/6374
    if (( GUI_UNPROTECTED )); then
        config <<-EOF
        = gui insecure-admin-access     true
		EOF
    else
        config <<-EOF
        = gui user                      $(q "${GUI_USER:?}")
        = gui password                  $(q "${GUI_PASSWORD:?}")
		EOF
    fi

    config <<-EOF
    = gui raw-address                   0.0.0.0:8384
	EOF
fi

stcli operations shutdown
wait
