#!/bin/bash
#
# Initializes syncthing with configs appropriate for the target environment (a
# docker-compose setup on a server somewhere on the intertubes), and then starts
# it.
#
# Ideally the configs set here should not be changeable by users from the GUI,
# but syncthing doesn't allow to lock down most of them.
#
# So instead we just reset all the managed settings as if they were not part of
# syncthing's persisted state.
#

set -eo pipefail

STHOME="${1:?Missing config directory}"
STAPIKEY="$(cat /proc/sys/kernel/random/uuid)"


### environment ################################################################

# All managed environment variables should allow getting their value from files.
USER_VARS=(
    GLOBAL_ANNOUNCE_ENABLED
    GUI_ENABLED
    GUI_PASSWORD
    GUI_UNPROTECTED
    GUI_USER
    SYNC_PORT
)

# Spelled-out switches look nicer in the compose file, but it's easier to handle
# 0/empty and 1 in bash.
FLAG_VARS=(
    GLOBAL_ANNOUNCE_ENABLED
    GUI_ENABLED
    GUI_UNPROTECTED
)

for varname in "${USER_VARS[@]}"; do
    declare -n src="${varname}__FILE"
    declare -n tgt="$varname"
    export tgt

    if [ -z "${tgt+isset}" ] && [ -f "$src" ]; then
        tgt="$(cat "$src")"
    fi
done

for varname in "${FLAG_VARS[@]}"; do
    declare -n var="${varname}"

    case "$var" in
        true|yes) var=1 ;;
        false|no) var=0 ;;
    esac
done


### utility functions ##########################################################

# Retrying wrapper for 'syncthing cli'
stcli() {
    # GUI changes makes the server hang for 15-20 seconds, so we allow a failure
    # timeout to work around this.
    # https://github.com/syncthing/syncthing/issues/8255
    local timeout start now
    timeout=30
    start="$(date +%s)"

    until syncthing cli --home "$STHOME" "$@"; do
        now="$(date +%s)"
        if (( start + timeout < now )); then
            >&2 echo "Syncthing server timeout, aborting init"
            exit 1
        fi
        sleep 1
    done
}

# Call syncthing's REST endpoints
strest() {
    curl -sS -H "X-API-Key: $STAPIKEY" localhost:8384/rest/"${1#/}" "${@:2}"
}

# Escapes (quotes) each argument, then outputs them separated by a space
q() {
    while (( $# )); do
        printf '%q' "$1"
        shift
        if (( $# )); then
            printf ' '
        fi
    done
}

# Set the global variable specified as first argument to the content of stdin
into() {
    declare -gn var="${1:?Missing VAR}"
    if (( ${#var} )); then
        var+=$'\n'
    fi
    var+="$(cat)"
}

# Convert a shell string to a JSON string
jsonstr() {
    sed -E -e 's/\\/\\\\/g' -e 's/"/\\"/g' -e 's/^|$/"/g'
}
export -f jsonstr # Export needed for use in 'xargs bash'

# Transforms a list of arguments to a JSON array suitable for jq's PATHS args
aspath() {
    local k keys str
    for k in "$@"; do
        keys+=("$(echo "$k" | jsonstr)")
    done
    printf -v str -- ", %s" "${keys[@]}"
    echo "[${str:2}]"
}
export -f aspath # Export needed for use in 'xargs bash'

# Apply a single transformation to stdin's JSON specified by the arguments.
apply() {
    local op

    op="$1"; shift
    case "$op" in
    =)  # set value
        jq \
            --argjson path "$(aspath "${@:1:$#-1}")" \
            --arg value "${@: -1}" \
            'setpath($path; $value)'
        ;;
    z)  # clear list
        jq \
            --argjson path "$(aspath "$@")" \
            'setpath($path; [])'
        ;;
    \+) # append to list
        jq \
            --argjson path "$(aspath "${@:1:$#-1}")" \
            --arg value "${@: -1}" \
            'setpath($path; getpath($path) + [$value])'
        ;;
    esac
}
export -f apply # Export needed for use in 'xargs bash'

# Transforms a JSON from stdin using several instructions from the configuration
# mini language.
config() {
    local configscript

    # Remove comments and trailing spaces (special meaning for xargs)
    # Note: Comments removal is dumb, doens't handle '#' inside strings
    configscript="$(
        echo "${1:?}" \
        | sed -E 's/\s*#.*$//' \
        | xargs -L1 bash -c 'printf " %q" "$@"; echo' -
    )"

    # Apply each command from configscript in turn to stdin (syncthing's config)
    xargs -L1 -a <(echo "$configscript") -- bash -c 'apply "$@"' -
}

### (re-)initialization ########################################################

into CONFIG <<EOF
# Overwrites the default "default" value; we want "default" but with custom
# ports and without relays (by default peers connect with the domain name)
z options raw-listen-addresses
+ options raw-listen-addresses      tcp://:$(q "${SYNC_PORT:-22000}")
+ options raw-listen-addresses      quic://:$(q "${SYNC_PORT:-22000}")

= options local-ann-enabled         false           # Server setup, no local devices
= options global-ann-enabled        false           # Peers connect with the domain name
= options start-browser             false
= options natenabled                false           # Disables uPNP and NAT-PMP, the external IP is still correctly resolved
= options auto-upgrade-intervalh    0               # Docker setup, should upgrade the image instead (disabled in upstream's build anyway)

= defaults folder path              /data
= defaults folder ignore-perms      true

= gui raw-address                   127.0.0.1:8384  # Unreachable from outside unless explicitly enabled
EOF

if (( GLOBAL_ANNOUNCE_ENABLED )); then
    into CONFIG <<-EOF
    # Same as with the 'default' value (at the time this script was written).
    # Cannot be replaced with just 'default' as the port might be custom.
    + options raw-listen-addresses  dynamic+https://relays.syncthing.net/endpoint
    = options global-ann-enabled    true
	EOF
fi

# Leaving the GUI unprotected requires an affirmative step
if (( GUI_ENABLED )) && ! (( GUI_UNPROTECTED )); then
    into CONFIG <<-EOF
    = gui user                      $(q "${GUI_USER:?}")
    = gui password                  $(q "${GUI_PASSWORD:?}")
	EOF
fi

if (( GUI_ENABLED )); then
    into CONFIG <<-EOF
    = gui raw-address               0.0.0.0:8384
	EOF
fi


echo "Configuring syncthing..."

initargs=(
    --home "$STHOME"

    # Overridden only during initialization (note: log outputs are misleading)
    --gui-address 127.0.0.1:8384
    --gui-apikey "$STAPIKEY"

    --no-browser
    --no-restart                    # Managed by docker-compose
    --no-upgrade                    # Upgrade the docker image instead

    --skip-port-probing
    --no-default-folder
)

# Start an instance that will be used to modify its own configuration
syncthing serve "${initargs[@]}" &

# Allow some time for the server to be ready
stcli config version get >/dev/null 2>&2

curl -sS -H "X-API-Key: $STAPIKEY" localhost:8384/rest/config \
| config "$CONFIG" \
| curl -sS -H "X-API-Key: $STAPIKEY" localhost:8384/rest/config -X PUT -d @-

stcli operations shutdown
wait

echo "Configuration done, restarting..."

# Start syncthing for normal operations
syncthing serve --home "$STHOME"
